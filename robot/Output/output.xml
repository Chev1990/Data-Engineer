<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.0.3 (Python 3.11.2 on win32)" generated="20230414 10:14:31.193" rpa="false" schemaversion="2">
<suite id="s1" name="Robot Test" source="C:\Users\Ekaterina_Chudinova.EPAM\Desktop\Desktop\DQA\DE\Data-Engineer\robot\robot_test.robot">
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary" type="SETUP">
<arg>pyodbc</arg>
<arg>${DBHost_ConnectionString}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20230414 10:14:31.245" level="INFO">Executing : Connect To Database Using Custom Params : pyodbc.connect(db_api_2.connect('DRIVER={ODBC Driver 17 for SQL Server};Server=(localdb)\MyInstance;Database=TRN;integrated security=true')) </msg>
<status status="PASS" starttime="20230414 10:14:31.240" endtime="20230414 10:14:31.335"/>
</kw>
<test id="s1-t1" name="Test 1. Employees: Verify Query - Row Count employees table">
<kw name="Query" library="DatabaseLibrary">
<var>${output}</var>
<arg>SELECT COUNT(*) FROM hr.employees;</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230414 10:14:31.338" level="INFO">Executing : Query  |  SELECT COUNT(*) FROM hr.employees; </msg>
<msg timestamp="20230414 10:14:31.341" level="INFO">${output} = [(40, )]</msg>
<status status="PASS" starttime="20230414 10:14:31.337" endtime="20230414 10:14:31.341"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230414 10:14:31.343" level="INFO">[(40, )]</msg>
<status status="PASS" starttime="20230414 10:14:31.342" endtime="20230414 10:14:31.343"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>[(40, )]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20230414 10:14:31.345" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20230414 10:14:31.344" endtime="20230414 10:14:31.345"/>
</kw>
<doc>*Test Steps:*
1. Connect to DB;
2. Execute query: Count the number of rows in table('employees') using count(*)

*Expected result:* the count of rows in table 'employees' equals 40</doc>
<tag>AUTOTEST-001: []</tag>
<status status="PASS" starttime="20230414 10:14:31.335" endtime="20230414 10:14:31.346"/>
</test>
<test id="s1-t2" name="Test 2. Departments: Verify a Table Exists">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>departments</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20230414 10:14:31.349" level="INFO">Executing : Table Must Exist  |  departments </msg>
<msg timestamp="20230414 10:14:31.350" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='departments' </msg>
<status status="PASS" starttime="20230414 10:14:31.349" endtime="20230414 10:14:31.373"/>
</kw>
<doc>*Test Steps:*
1. Connect to DB;
2. Execute query: Check the table('departments') is in this DB

*Expected result:* the table 'departments' exists in DB</doc>
<tag>AUTOTEST-002: []</tag>
<status status="PASS" starttime="20230414 10:14:31.348" endtime="20230414 10:14:31.374"/>
</test>
<test id="s1-t3" name="Test 3. Employees: Verify the average salary of employees is equal to a specified value">
<kw name="Query" library="DatabaseLibrary">
<var>${output}</var>
<arg>select left(avg(salary),4) from hr.employees;</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230414 10:14:31.378" level="INFO">Executing : Query  |  select left(avg(salary),4) from hr.employees; </msg>
<msg timestamp="20230414 10:14:31.381" level="INFO">${output} = [('8060', )]</msg>
<status status="PASS" starttime="20230414 10:14:31.378" endtime="20230414 10:14:31.381"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230414 10:14:31.383" level="INFO">[('8060', )]</msg>
<status status="PASS" starttime="20230414 10:14:31.382" endtime="20230414 10:14:31.383"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>[('8060', )]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20230414 10:14:31.386" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20230414 10:14:31.385" endtime="20230414 10:14:31.386"/>
</kw>
<doc>*Test Steps:*
1. Connect to DB;
2. Execute query: Calculate the average salary of employees using avg(*)

*Expected result:* the average salary of employees = 8060</doc>
<tag>AUTOTEST-003: []</tag>
<status status="PASS" starttime="20230414 10:14:31.377" endtime="20230414 10:14:31.387"/>
</test>
<test id="s1-t4" name="Test 4. Jobs: Verify duplicate rows are not in table jobs">
<kw name="Query" library="DatabaseLibrary">
<var>${output}</var>
<arg>select job_id, job_title, min_salary,max_salary, count(*) cnt from hr.jobs group by job_id, job_title, min_salary,max_salary having count(*)&gt;1;</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230414 10:14:31.395" level="INFO">Executing : Query  |  select job_id, job_title, min_salary,max_salary, count(*) cnt from hr.jobs group by job_id, job_title, min_salary,max_salary having count(*)&gt;1; </msg>
<msg timestamp="20230414 10:14:31.397" level="INFO">${output} = []</msg>
<status status="PASS" starttime="20230414 10:14:31.394" endtime="20230414 10:14:31.397"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230414 10:14:31.398" level="INFO">[]</msg>
<status status="PASS" starttime="20230414 10:14:31.398" endtime="20230414 10:14:31.398"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>[]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20230414 10:14:31.402" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20230414 10:14:31.401" endtime="20230414 10:14:31.402"/>
</kw>
<doc>*Test Steps:*
1. Connect to DB;
2. Execute query: Count the number of duplicate rows in jobs table

*Expected result:* count of rows in table &gt; 0</doc>
<tag>AUTOTEST-004: []</tag>
<status status="PASS" starttime="20230414 10:14:31.390" endtime="20230414 10:14:31.403"/>
</test>
<test id="s1-t5" name="Test 5. Jobs: Check column value (min_salary) for job_title = 'Public Accountant'">
<kw name="Query" library="DatabaseLibrary">
<var>${output}</var>
<arg>select left(min_salary,4) from hr.jobs where job_title = 'Public Accountant';</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230414 10:14:31.410" level="INFO">Executing : Query  |  select left(min_salary,4) from hr.jobs where job_title = 'Public Accountant'; </msg>
<msg timestamp="20230414 10:14:31.413" level="INFO">${output} = [('4200', )]</msg>
<status status="PASS" starttime="20230414 10:14:31.410" endtime="20230414 10:14:31.413"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230414 10:14:31.414" level="INFO">[('4200', )]</msg>
<status status="PASS" starttime="20230414 10:14:31.414" endtime="20230414 10:14:31.415"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>[('4200', )]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20230414 10:14:31.418" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20230414 10:14:31.418" endtime="20230414 10:14:31.418"/>
</kw>
<doc>*Test Steps:*
1. Connect to DB;
2. Execute query: min_salary for specified job_title

*Expected result:* min salary of specified job_title is equal to 4200</doc>
<tag>AUTOTEST-005: []</tag>
<status status="PASS" starttime="20230414 10:14:31.405" endtime="20230414 10:14:31.419"/>
</test>
<test id="s1-t6" name="Test 6. Regions: Check If Exists In DB - region Europe">
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<arg>SELECT region_id FROM hr.regions WHERE region_name = 'Europe';</arg>
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<msg timestamp="20230414 10:14:31.427" level="INFO">Executing : Check If Exists In Database  |  SELECT region_id FROM hr.regions WHERE region_name = 'Europe'; </msg>
<msg timestamp="20230414 10:14:31.427" level="INFO">Executing : Query  |  SELECT region_id FROM hr.regions WHERE region_name = 'Europe'; </msg>
<status status="PASS" starttime="20230414 10:14:31.426" endtime="20230414 10:14:31.430"/>
</kw>
<doc>*Test Steps:*
1. Connect to DB;
2. Execute query: check thst region Europe Exists In DB

*Expected result:* region Europe Exists In DB with id = 1</doc>
<tag>AUTOTEST-006: []</tag>
<status status="PASS" starttime="20230414 10:14:31.422" endtime="20230414 10:14:31.434"/>
</test>
<test id="s1-t7" name="Test 6. Regions: Check If Exists In DB - region Europe">
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<arg>SELECT region_id FROM hr.regions WHERE region_name = 'Europe';</arg>
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<msg timestamp="20230414 10:14:31.443" level="INFO">Executing : Check If Exists In Database  |  SELECT region_id FROM hr.regions WHERE region_name = 'Europe'; </msg>
<msg timestamp="20230414 10:14:31.444" level="INFO">Executing : Query  |  SELECT region_id FROM hr.regions WHERE region_name = 'Europe'; </msg>
<status status="PASS" starttime="20230414 10:14:31.443" endtime="20230414 10:14:31.445"/>
</kw>
<doc>*Test Steps:*
1. Connect to DB;
2. Execute query: check thst region Europe Exists In DB

*Expected result:* region Europe Exists In DB with id = 1</doc>
<tag>AUTOTEST-006: []</tag>
<status status="PASS" starttime="20230414 10:14:31.442" endtime="20230414 10:14:31.445"/>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20230414 10:14:31.452" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20230414 10:14:31.452" endtime="20230414 10:14:31.453"/>
</kw>
<status status="PASS" starttime="20230414 10:14:31.195" endtime="20230414 10:14:31.453"/>
</suite>
<statistics>
<total>
<stat pass="7" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">AUTOTEST-001: []</stat>
<stat pass="1" fail="0" skip="0">AUTOTEST-002: []</stat>
<stat pass="1" fail="0" skip="0">AUTOTEST-003: []</stat>
<stat pass="1" fail="0" skip="0">AUTOTEST-004: []</stat>
<stat pass="1" fail="0" skip="0">AUTOTEST-005: []</stat>
<stat pass="2" fail="0" skip="0">AUTOTEST-006: []</stat>
</tag>
<suite>
<stat pass="7" fail="0" skip="0" id="s1" name="Robot Test">Robot Test</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20230414 10:14:31.437" level="WARN">Multiple test cases with name 'Test 6. Regions: Check If Exists In DB - region Europe' executed in test suite 'Robot Test'.</msg>
</errors>
</robot>
